import Jama.Matrix;
import jpeg.Quantization;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.opentest4j.AssertionFailedError;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;

@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class QuantizationTest {

    @Test
    @Order(1)
    void quantizationMatricesTest() {
        System.out.println("Testing quantization matrices:");
        System.out.println("\tTest for right alpha value:");
        assertArrayEquals(new Matrix(8, 8, 1).getArray(), Quantization.getQuantizationMatrix(8, 100, false).getArray(), "Quantization matrix 8x8 for quality 100, should contain only 1");
        System.out.println("\t\tMatrix 8x8, Q100: OK");

        assertArrayEquals(quantMatrix8_75_Y, roundArray(Quantization.getQuantizationMatrix(8, 75, true), 2), "Quantization matrix 8x8 for quality 75 does not match");
        System.out.println("\t\tMatrix 8x8, Q75, Y: OK");

        assertArrayEquals(quantMatrix8_25_C, roundArray(Quantization.getQuantizationMatrix(8, 25, false), 2), "Quantization matrix 8x8 for quality 25 does not match");
        System.out.println("\t\tMatrix 8x8, Q25, C: OK");

        System.out.println("\n\tTest for changing sizes:");
        assertArrayEquals(quantMatrix4_50_C, roundArray(Quantization.getQuantizationMatrix(4, 50, false), 2), "Quantization matrix 4x4 for quality 50 does not match");
        System.out.println("\t\tMatrix 4x4, Q50, C: OK");

        assertArrayEquals(quantMatrix16_50_C, roundArray(Quantization.getQuantizationMatrix(16, 50, false), 2), "Quantization matrix 16x16 for quality 50 does not match");
        System.out.println("\t\tMatrix 16x16, Q50, C: OK");

        assertArrayEquals(quantMatrix32_50_C, roundArray(Quantization.getQuantizationMatrix(32, 50, false), 2), "Quantization matrix 32x32 for quality 50 does not match");
        System.out.println("\t\tMatrix 32x32, Q50, C: OK" + "\n");

    }

    @Test
    @Order(2)
    void quantizationTest() {
        boolean error = false;
        System.out.println("Testing quantization:");

        var quantize16Ytest = Quantization.quantize(new Matrix(input), 8, 50, true);
        try {
            assertArrayEquals(quantize16Y, roundArray(quantize16Ytest, 2), "Quantization 16x16 with block 8, Y and Q50: does not match");
            System.out.println("\tQuantization 16x16 with block 8, Y and Q50: OK");

        } catch (Error e) {
            System.err.println("Quantization 16x16 with block 8, Y and Q50: does not match");

            // Test, if code us using only round
            var roundQuantize16Ytest = Quantization.quantize(new Matrix(input), 8, 50, true);
            try {
                assertArrayEquals(roundQuantize16Y, roundArray(roundQuantize16Ytest, 2), "Quantization 16x16 with block 8, Y and Q50: does not match");
            } catch (Error ex) {
                throw e;
            }
            error = true;
            System.err.println("You are using Math.Round in quantization, " +
                                       "instead of more precise rounding method (round to 2 decimal places between -0.2 and 0.2, in the rest round to 1 decimal place).");
        }

        try {
            var quantize16Ctest = Quantization.quantize(new Matrix(input), 8, 50, false);
            assertArrayEquals(quantize16C, roundArray(quantize16Ctest, 2), "Quantization 16x16 with block 8, C and Q50: does not match");
            System.out.println("\tQuantization 16x16 with block 8, C and Q50: OK");
        } catch (Error e) {
            System.err.println("Quantization 16x16 with block 8, C and Q50: does not match");

            // Test, if code us using only round
            var roundQuantize16Ctest = Quantization.quantize(new Matrix(input), 8, 50, false);
            try {
                assertArrayEquals(roundQuantize16C, roundArray(roundQuantize16Ctest, 2), "Quantization 16x16 with block 8, C and Q50: does not match");
            } catch (Error ex) {
                throw e;
            }
            error = true;
            System.err.println("You are using Math.Round in quantization, " +
                                       "instead of more precise rounding method (round to 2 decimal places between -0.2 and 0.2, in the rest round to 1 decimal place).");
        }

        System.out.println("\nTesting inverse quantization:");
        var inverseQuantize16Ytest = Quantization.inverseQuantize(new Matrix(quantize16Y), 8, 50, true);
        assertArrayEquals(inverseQuantize16Y, roundArray(inverseQuantize16Ytest, 2), "Inverse quantization 16x16 with block 8, Y and Q50: does not match");
        System.out.println("\tInverse quantization 16x16 with block 8, Y and Q50: OK");

        var inverseQuantize16Ctest = Quantization.inverseQuantize(new Matrix(quantize16C), 8, 50, false);
        assertArrayEquals(inverseQuantize16C, roundArray(inverseQuantize16Ctest, 2), "Inverse quantization 16x16 with block 8, C and Q50: does not match");
        System.out.println("\tInverse quantization 16x16 with block 8, C and Q50: OK" + "\n");

        if (error) {
            throw new AssertionFailedError("Math.Round is used in quantization ");
        }
    }

    static double[][] quantMatrix8_75_Y = {{8.0, 5.5, 5.0, 8.0, 12.0, 20.0, 25.5, 30.5}, {6.0, 6.0, 7.0, 9.5, 13.0, 29.0, 30.0, 27.5}, {7.0, 6.5, 8.0, 12.0, 20.0, 28.5, 34.5, 28.0}, {7.0, 8.5, 11.0, 14.5, 25.5, 43.5, 40.0, 31.0}, {9.0, 11.0, 18.5, 28.0, 34.0, 54.5, 51.5, 38.5}, {12.0, 17.5, 27.5, 32.0, 40.5, 52.0, 56.5, 46.0}, {24.5, 32.0, 39.0, 43.5, 51.5, 60.5, 60.0, 50.5}, {36.0, 46.0, 47.5, 49.0, 56.0, 50.0, 51.5, 49.5}};
    static double[][] quantMatrix8_25_C = {{34.0, 36.0, 48.0, 94.0, 198.0, 198.0, 198.0, 198.0}, {36.0, 42.0, 52.0, 132.0, 198.0, 198.0, 198.0, 198.0}, {48.0, 52.0, 112.0, 198.0, 198.0, 198.0, 198.0, 198.0}, {94.0, 132.0, 198.0, 198.0, 198.0, 198.0, 198.0, 198.0}, {198.0, 198.0, 198.0, 198.0, 198.0, 198.0, 198.0, 198.0}, {198.0, 198.0, 198.0, 198.0, 198.0, 198.0, 198.0, 198.0}, {198.0, 198.0, 198.0, 198.0, 198.0, 198.0, 198.0, 198.0}, {198.0, 198.0, 198.0, 198.0, 198.0, 198.0, 198.0, 198.0}};

    static double[][] quantMatrix4_50_C = {{17.0, 24.0, 99.0, 99.0}, {24.0, 56.0, 99.0, 99.0}, {99.0, 99.0, 99.0, 99.0}, {99.0, 99.0, 99.0, 99.0}};
    static double[][] quantMatrix16_50_C = {{17.0, 17.0, 18.0, 18.0, 24.0, 24.0, 47.0, 47.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {17.0, 17.0, 18.0, 18.0, 24.0, 24.0, 47.0, 47.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {18.0, 18.0, 21.0, 21.0, 26.0, 26.0, 66.0, 66.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {18.0, 18.0, 21.0, 21.0, 26.0, 26.0, 66.0, 66.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {24.0, 24.0, 26.0, 26.0, 56.0, 56.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {24.0, 24.0, 26.0, 26.0, 56.0, 56.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {47.0, 47.0, 66.0, 66.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {47.0, 47.0, 66.0, 66.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}};
    static double[][] quantMatrix32_50_C = {{17.0, 17.0, 17.0, 17.0, 18.0, 18.0, 18.0, 18.0, 24.0, 24.0, 24.0, 24.0, 47.0, 47.0, 47.0, 47.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {17.0, 17.0, 17.0, 17.0, 18.0, 18.0, 18.0, 18.0, 24.0, 24.0, 24.0, 24.0, 47.0, 47.0, 47.0, 47.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {17.0, 17.0, 17.0, 17.0, 18.0, 18.0, 18.0, 18.0, 24.0, 24.0, 24.0, 24.0, 47.0, 47.0, 47.0, 47.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {17.0, 17.0, 17.0, 17.0, 18.0, 18.0, 18.0, 18.0, 24.0, 24.0, 24.0, 24.0, 47.0, 47.0, 47.0, 47.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {18.0, 18.0, 18.0, 18.0, 21.0, 21.0, 21.0, 21.0, 26.0, 26.0, 26.0, 26.0, 66.0, 66.0, 66.0, 66.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {18.0, 18.0, 18.0, 18.0, 21.0, 21.0, 21.0, 21.0, 26.0, 26.0, 26.0, 26.0, 66.0, 66.0, 66.0, 66.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {18.0, 18.0, 18.0, 18.0, 21.0, 21.0, 21.0, 21.0, 26.0, 26.0, 26.0, 26.0, 66.0, 66.0, 66.0, 66.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {18.0, 18.0, 18.0, 18.0, 21.0, 21.0, 21.0, 21.0, 26.0, 26.0, 26.0, 26.0, 66.0, 66.0, 66.0, 66.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {24.0, 24.0, 24.0, 24.0, 26.0, 26.0, 26.0, 26.0, 56.0, 56.0, 56.0, 56.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {24.0, 24.0, 24.0, 24.0, 26.0, 26.0, 26.0, 26.0, 56.0, 56.0, 56.0, 56.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {24.0, 24.0, 24.0, 24.0, 26.0, 26.0, 26.0, 26.0, 56.0, 56.0, 56.0, 56.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {24.0, 24.0, 24.0, 24.0, 26.0, 26.0, 26.0, 26.0, 56.0, 56.0, 56.0, 56.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {47.0, 47.0, 47.0, 47.0, 66.0, 66.0, 66.0, 66.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {47.0, 47.0, 47.0, 47.0, 66.0, 66.0, 66.0, 66.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {47.0, 47.0, 47.0, 47.0, 66.0, 66.0, 66.0, 66.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {47.0, 47.0, 47.0, 47.0, 66.0, 66.0, 66.0, 66.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}, {99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0}};

    static double[][] roundQuantize16Y = {{11.0, 20.0, 19.0, 8.0, 3.0, 2.0, 5.0, 1.0, 15.0, 20.0, 22.0, 10.0, 0.0, 4.0, 1.0, 1.0}, {21.0, 2.0, 15.0, 2.0, 3.0, 1.0, 1.0, 3.0, 9.0, 3.0, 14.0, 8.0, 7.0, 4.0, 3.0, 3.0}, {12.0, 14.0, 14.0, 7.0, 3.0, 4.0, 3.0, 1.0, 17.0, 2.0, 4.0, 3.0, 6.0, 4.0, 4.0, 1.0}, {2.0, 6.0, 10.0, 6.0, 1.0, 0.0, 3.0, 0.0, 10.0, 13.0, 6.0, 2.0, 4.0, 2.0, 2.0, 4.0}, {11.0, 2.0, 6.0, 2.0, 2.0, 2.0, 1.0, 2.0, 7.0, 7.0, 6.0, 4.0, 0.0, 1.0, 1.0, 0.0}, {1.0, 3.0, 3.0, 1.0, 1.0, 2.0, 1.0, 3.0, 7.0, 4.0, 4.0, 3.0, 0.0, 1.0, 1.0, 2.0}, {5.0, 2.0, 2.0, 1.0, 1.0, 2.0, 1.0, 2.0, 4.0, 3.0, 3.0, 2.0, 1.0, 0.0, 2.0, 1.0}, {0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 1.0}, {11.0, 11.0, 20.0, 9.0, 5.0, 4.0, 1.0, 3.0, 4.0, 0.0, 3.0, 1.0, 8.0, 3.0, 3.0, 1.0}, {3.0, 1.0, 11.0, 7.0, 6.0, 2.0, 3.0, 4.0, 21.0, 9.0, 6.0, 8.0, 0.0, 2.0, 1.0, 2.0}, {2.0, 9.0, 6.0, 7.0, 6.0, 2.0, 2.0, 3.0, 1.0, 10.0, 7.0, 5.0, 5.0, 3.0, 1.0, 2.0}, {3.0, 11.0, 2.0, 1.0, 3.0, 1.0, 2.0, 0.0, 16.0, 9.0, 9.0, 8.0, 5.0, 0.0, 2.0, 2.0}, {5.0, 11.0, 1.0, 0.0, 3.0, 2.0, 2.0, 0.0, 1.0, 3.0, 6.0, 2.0, 3.0, 0.0, 2.0, 2.0}, {5.0, 7.0, 3.0, 3.0, 3.0, 2.0, 1.0, 2.0, 7.0, 5.0, 3.0, 1.0, 1.0, 1.0, 2.0, 1.0}, {2.0, 3.0, 2.0, 3.0, 0.0, 0.0, 1.0, 2.0, 5.0, 3.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0}, {0.0, 2.0, 2.0, 1.0, 2.0, 0.0, 1.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0}};
    static double[][] roundQuantize16C = {{10.0, 12.0, 8.0, 3.0, 1.0, 1.0, 3.0, 0.0, 14.0, 12.0, 9.0, 3.0, 0.0, 2.0, 0.0, 1.0}, {14.0, 1.0, 8.0, 0.0, 1.0, 1.0, 1.0, 2.0, 6.0, 2.0, 8.0, 2.0, 2.0, 2.0, 2.0, 2.0}, {7.0, 7.0, 4.0, 2.0, 1.0, 3.0, 2.0, 0.0, 10.0, 1.0, 1.0, 1.0, 3.0, 2.0, 3.0, 1.0}, {1.0, 2.0, 2.0, 2.0, 0.0, 0.0, 2.0, 0.0, 3.0, 3.0, 1.0, 1.0, 2.0, 2.0, 1.0, 2.0}, {2.0, 1.0, 2.0, 1.0, 1.0, 3.0, 1.0, 2.0, 1.0, 2.0, 2.0, 2.0, 0.0, 1.0, 1.0, 0.0}, {0.0, 1.0, 2.0, 1.0, 1.0, 2.0, 1.0, 3.0, 2.0, 1.0, 2.0, 2.0, 0.0, 1.0, 1.0, 2.0}, {2.0, 1.0, 2.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 3.0, 2.0, 1.0, 0.0, 2.0, 1.0}, {0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 2.0, 0.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 1.0}, {10.0, 7.0, 8.0, 3.0, 1.0, 2.0, 0.0, 2.0, 3.0, 0.0, 1.0, 0.0, 2.0, 1.0, 2.0, 1.0}, {2.0, 1.0, 6.0, 2.0, 2.0, 1.0, 2.0, 2.0, 14.0, 5.0, 3.0, 2.0, 0.0, 1.0, 1.0, 1.0}, {1.0, 5.0, 2.0, 2.0, 2.0, 1.0, 1.0, 2.0, 1.0, 5.0, 2.0, 1.0, 2.0, 2.0, 1.0, 1.0}, {1.0, 3.0, 0.0, 0.0, 1.0, 1.0, 2.0, 0.0, 5.0, 2.0, 2.0, 2.0, 3.0, 0.0, 2.0, 1.0}, {1.0, 3.0, 0.0, 0.0, 2.0, 2.0, 2.0, 0.0, 0.0, 1.0, 2.0, 1.0, 2.0, 0.0, 2.0, 2.0}, {1.0, 2.0, 2.0, 2.0, 2.0, 3.0, 1.0, 2.0, 2.0, 2.0, 1.0, 0.0, 1.0, 1.0, 2.0, 1.0}, {1.0, 2.0, 2.0, 2.0, 0.0, 1.0, 1.0, 2.0, 2.0, 2.0, 0.0, 1.0, 2.0, 2.0, 2.0, 2.0}, {0.0, 2.0, 2.0, 1.0, 3.0, 0.0, 1.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0}};

    static double[][] input = {{168.72, 216.51, 186.13, 135.26, 65.3, 97.73, 248.18, 45.35, 240.43, 223.41, 215.5, 160.01, 1.74, 174.45, 43.61, 63.93}, {251.41, 24.9, 216.09, 31.31, 66.23, 60.19, 60.41, 163.95, 107.32, 35.75, 198.95, 157.87, 184.19, 243.49, 184.21, 149.03}, {171.94, 184.88, 229.46, 162.32, 109.47, 254.19, 220.02, 37.17, 239.12, 27.67, 56.05, 67.98, 250.55, 200.49, 249.78, 77.47}, {27.93, 106.19, 214.79, 161.83, 40.0, 40.23, 215.01, 17.48, 142.36, 223.55, 124.24, 60.88, 215.55, 189.34, 135.95, 219.87}, {205.28, 51.85, 223.94, 122.34, 144.18, 249.03, 147.48, 151.12, 120.43, 162.48, 228.65, 242.33, 0.11, 92.19, 105.67, 28.39}, {24.82, 100.86, 169.24, 76.04, 75.62, 217.96, 112.82, 254.8, 167.67, 136.59, 244.71, 186.43, 23.07, 132.52, 57.29, 221.71}, {230.83, 123.96, 163.69, 122.12, 124.67, 207.53, 153.54, 160.78, 219.27, 191.05, 247.63, 198.89, 120.52, 36.8, 196.1, 101.99}, {14.08, 134.87, 1.38, 52.97, 114.42, 145.13, 150.43, 2.71, 99.23, 73.43, 120.81, 103.07, 235.15, 197.3, 176.91, 76.57}, {171.72, 124.55, 200.86, 136.86, 130.33, 178.79, 33.39, 159.88, 59.13, 4.82, 25.97, 11.22, 198.15, 118.58, 160.07, 76.62}, {36.66, 16.06, 148.89, 124.61, 151.31, 108.26, 184.58, 222.31, 249.99, 105.18, 77.36, 148.39, 6.26, 140.11, 83.59, 120.45}, {33.86, 122.33, 102.0, 177.72, 239.49, 116.04, 121.27, 164.11, 19.86, 130.55, 112.6, 111.64, 211.27, 187.53, 83.58, 88.93}, {46.08, 194.58, 33.48, 20.4, 141.39, 120.81, 175.93, 27.75, 224.55, 159.44, 197.67, 241.9, 254.61, 15.13, 150.9, 115.43}, {91.51, 248.71, 43.19, 13.18, 212.85, 175.72, 181.1, 31.66, 9.1, 61.08, 208.47, 136.06, 229.53, 46.88, 171.14, 187.9}, {125.89, 237.18, 162.83, 195.4, 225.31, 254.16, 131.48, 208.62, 172.4, 167.93, 146.54, 36.75, 78.34, 138.72, 220.63, 110.54}, {116.52, 223.99, 193.93, 229.16, 5.8, 60.32, 145.79, 212.56, 237.48, 219.9, 41.4, 127.43, 177.13, 214.4, 226.06, 207.54}, {5.75, 170.13, 216.4, 117.3, 253.38, 12.29, 110.84, 186.14, 65.04, 22.96, 76.94, 155.07, 120.65, 97.55, 134.91, 91.41}};
    static double[][] quantize16Y = {{10.5, 19.7, 18.6, 8.5, 2.7, 2.4, 4.9, 0.7, 15.0, 20.3, 21.6, 10.0, 0.07, 4.4, 0.9, 1.0}, {21.0, 2.1, 15.4, 1.6, 2.5, 1.0, 1.0, 3.0, 8.9, 3.0, 14.2, 8.3, 7.1, 4.2, 3.1, 2.7}, {12.3, 14.2, 14.3, 6.8, 2.7, 4.5, 3.2, 0.7, 17.1, 2.1, 3.5, 2.8, 6.3, 3.5, 3.6, 1.4}, {2.0, 6.2, 9.8, 5.6, 0.8, 0.5, 2.7, 0.3, 10.2, 13.2, 5.6, 2.1, 4.2, 2.2, 1.7, 3.5}, {11.4, 2.4, 6.1, 2.2, 2.1, 2.3, 1.4, 2.0, 6.7, 7.4, 6.2, 4.3, 0.0, 0.8, 1.0, 0.4}, {1.0, 2.9, 3.1, 1.2, 0.9, 2.1, 1.0, 2.8, 7.0, 3.9, 4.4, 2.9, 0.3, 1.3, 0.5, 2.4}, {4.7, 1.9, 2.1, 1.4, 1.2, 1.7, 1.3, 1.6, 4.5, 3.0, 3.2, 2.3, 1.2, 0.3, 1.6, 1.0}, {0.2, 1.5, 0.01, 0.5, 1.0, 1.5, 1.5, 0.03, 1.4, 0.8, 1.3, 1.1, 2.1, 2.0, 1.7, 0.8}, {10.7, 11.3, 20.1, 8.6, 5.4, 4.5, 0.7, 2.6, 3.7, 0.4, 2.6, 0.7, 8.3, 3.0, 3.1, 1.3}, {3.1, 1.3, 10.6, 6.6, 5.8, 1.9, 3.1, 4.0, 20.8, 8.8, 5.5, 7.8, 0.2, 2.4, 1.4, 2.2}, {2.4, 9.4, 6.4, 7.4, 6.0, 2.0, 1.8, 2.9, 1.4, 10.0, 7.0, 4.7, 5.3, 3.3, 1.2, 1.6}, {3.3, 11.4, 1.5, 0.7, 2.8, 1.4, 2.2, 0.4, 16.0, 9.4, 9.0, 8.3, 5.0, 0.17, 1.9, 1.9}, {5.1, 11.3, 1.2, 0.2, 3.1, 1.6, 1.8, 0.4, 0.5, 2.8, 5.6, 2.4, 3.4, 0.4, 1.7, 2.4}, {5.2, 6.8, 3.0, 3.1, 2.8, 2.4, 1.2, 2.3, 7.2, 4.8, 2.7, 0.6, 1.0, 1.3, 2.0, 1.2}, {2.4, 3.5, 2.5, 2.6, 0.06, 0.5, 1.2, 2.1, 4.8, 3.4, 0.5, 1.5, 1.7, 1.8, 1.9, 2.1}, {0.08, 1.8, 2.3, 1.2, 2.3, 0.12, 1.1, 1.9, 0.9, 0.2, 0.8, 1.6, 1.1, 1.0, 1.3, 0.9}};
    static double[][] quantize16C = {{9.9, 12.0, 7.8, 2.9, 0.7, 1.0, 2.5, 0.5, 14.1, 12.4, 9.0, 3.4, 0.02, 1.8, 0.4, 0.6}, {14.0, 1.2, 8.3, 0.5, 0.7, 0.6, 0.6, 1.7, 6.0, 1.7, 7.7, 2.4, 1.9, 2.5, 1.9, 1.5}, {7.2, 7.1, 4.1, 1.6, 1.1, 2.6, 2.2, 0.4, 10.0, 1.1, 1.0, 0.7, 2.5, 2.0, 2.5, 0.8}, {0.6, 1.6, 2.2, 1.6, 0.4, 0.4, 2.2, 0.18, 3.0, 3.4, 1.3, 0.6, 2.2, 1.9, 1.4, 2.2}, {2.1, 0.5, 2.3, 1.2, 1.5, 2.5, 1.5, 1.5, 1.2, 1.6, 2.3, 2.4, 0.0, 0.9, 1.1, 0.3}, {0.3, 1.0, 1.7, 0.8, 0.8, 2.2, 1.1, 2.6, 1.7, 1.4, 2.5, 1.9, 0.2, 1.3, 0.6, 2.2}, {2.3, 1.3, 1.7, 1.2, 1.3, 2.1, 1.6, 1.6, 2.2, 1.9, 2.5, 2.0, 1.2, 0.4, 2.0, 1.0}, {0.14, 1.4, 0.01, 0.5, 1.2, 1.5, 1.5, 0.03, 1.0, 0.7, 1.2, 1.0, 2.4, 2.0, 1.8, 0.8}, {10.1, 6.9, 8.4, 2.9, 1.3, 1.8, 0.3, 1.6, 3.5, 0.3, 1.1, 0.2, 2.0, 1.2, 1.6, 0.8}, {2.0, 0.8, 5.7, 1.9, 1.5, 1.1, 1.9, 2.2, 13.9, 5.0, 3.0, 2.2, 0.06, 1.4, 0.8, 1.2}, {1.4, 4.7, 1.8, 1.8, 2.4, 1.2, 1.2, 1.7, 0.8, 5.0, 2.0, 1.1, 2.1, 1.9, 0.8, 0.9}, {1.0, 2.9, 0.3, 0.2, 1.4, 1.2, 1.8, 0.3, 4.8, 2.4, 2.0, 2.4, 2.6, 0.15, 1.5, 1.2}, {0.9, 2.5, 0.4, 0.13, 2.2, 1.8, 1.8, 0.3, 0.09, 0.6, 2.1, 1.4, 2.3, 0.5, 1.7, 1.9}, {1.3, 2.4, 1.6, 2.0, 2.3, 2.6, 1.3, 2.1, 1.7, 1.7, 1.5, 0.4, 0.8, 1.4, 2.2, 1.1}, {1.2, 2.3, 2.0, 2.3, 0.06, 0.6, 1.5, 2.1, 2.4, 2.2, 0.4, 1.3, 1.8, 2.2, 2.3, 2.1}, {0.06, 1.7, 2.2, 1.2, 2.6, 0.12, 1.1, 1.9, 0.7, 0.2, 0.8, 1.6, 1.2, 1.0, 1.4, 0.9}};
    static double[][] inverseQuantize16Y = {{168.0, 216.7, 186.0, 136.0, 64.8, 96.0, 249.9, 42.7, 240.0, 223.3, 216.0, 160.0, 1.68, 176.0, 45.9, 61.0}, {252.0, 25.2, 215.6, 30.4, 65.0, 58.0, 60.0, 165.0, 106.8, 36.0, 198.8, 157.7, 184.6, 243.6, 186.0, 148.5}, {172.2, 184.6, 228.8, 163.2, 108.0, 256.5, 220.8, 39.2, 239.4, 27.3, 56.0, 67.2, 252.0, 199.5, 248.4, 78.4}, {28.0, 105.4, 215.6, 162.4, 40.8, 43.5, 216.0, 18.6, 142.8, 224.4, 123.2, 60.9, 214.2, 191.4, 136.0, 217.0}, {205.2, 52.8, 225.7, 123.2, 142.8, 250.7, 144.2, 154.0, 120.6, 162.8, 229.4, 240.8, 0.0, 87.2, 103.0, 30.8}, {24.0, 101.5, 170.5, 76.8, 72.9, 218.4, 113.0, 257.6, 168.0, 136.5, 242.0, 185.6, 24.3, 135.2, 56.5, 220.8}, {230.3, 121.6, 163.8, 121.8, 123.6, 205.7, 156.0, 161.6, 220.5, 192.0, 249.6, 200.1, 123.6, 36.3, 192.0, 101.0}, {14.4, 138.0, 0.95, 49.0, 112.0, 150.0, 154.5, 2.97, 100.8, 73.6, 123.5, 107.8, 235.2, 200.0, 175.1, 79.2}, {171.2, 124.3, 201.0, 137.6, 129.6, 180.0, 35.7, 158.6, 59.2, 4.4, 26.0, 11.2, 199.2, 120.0, 158.1, 79.3}, {37.2, 15.6, 148.4, 125.4, 150.8, 110.2, 186.0, 220.0, 249.6, 105.6, 77.0, 148.2, 5.2, 139.2, 84.0, 121.0}, {33.6, 122.2, 102.4, 177.6, 240.0, 114.0, 124.2, 162.4, 19.6, 130.0, 112.0, 112.8, 212.0, 188.1, 82.8, 89.6}, {46.2, 193.8, 33.0, 20.3, 142.8, 121.8, 176.0, 24.8, 224.0, 159.8, 198.0, 240.7, 255.0, 14.79, 152.0, 117.8}, {91.8, 248.6, 44.4, 11.2, 210.8, 174.4, 185.4, 30.8, 9.0, 61.6, 207.2, 134.4, 231.2, 43.6, 175.1, 184.8}, {124.8, 238.0, 165.0, 198.4, 226.8, 249.6, 135.6, 211.6, 172.8, 168.0, 148.5, 38.4, 81.0, 135.2, 226.0, 110.4}, {117.6, 224.0, 195.0, 226.2, 6.18, 60.5, 144.0, 212.1, 235.2, 217.6, 39.0, 130.5, 175.1, 217.8, 228.0, 212.1}, {5.76, 165.6, 218.5, 117.6, 257.6, 12.0, 113.3, 188.1, 64.8, 18.4, 76.0, 156.8, 123.2, 100.0, 133.9, 89.1}};
    static double[][] inverseQuantize16C = {{168.3, 216.0, 187.2, 136.3, 69.3, 99.0, 247.5, 49.5, 239.7, 223.2, 216.0, 159.8, 1.98, 178.2, 39.6, 59.4}, {252.0, 25.2, 215.8, 33.0, 69.3, 59.4, 59.4, 168.3, 108.0, 35.7, 200.2, 158.4, 188.1, 247.5, 188.1, 148.5}, {172.8, 184.6, 229.6, 158.4, 108.9, 257.4, 217.8, 39.6, 240.0, 28.6, 56.0, 69.3, 247.5, 198.0, 247.5, 79.2}, {28.2, 105.6, 217.8, 158.4, 39.6, 39.6, 217.8, 17.82, 141.0, 224.4, 128.7, 59.4, 217.8, 188.1, 138.6, 217.8}, {207.9, 49.5, 227.7, 118.8, 148.5, 247.5, 148.5, 148.5, 118.8, 158.4, 227.7, 237.6, 0.0, 89.1, 108.9, 29.7}, {29.7, 99.0, 168.3, 79.2, 79.2, 217.8, 108.9, 257.4, 168.3, 138.6, 247.5, 188.1, 19.8, 128.7, 59.4, 217.8}, {227.7, 128.7, 168.3, 118.8, 128.7, 207.9, 158.4, 158.4, 217.8, 188.1, 247.5, 198.0, 118.8, 39.6, 198.0, 99.0}, {13.86, 138.6, 0.99, 49.5, 118.8, 148.5, 148.5, 2.97, 99.0, 69.3, 118.8, 99.0, 237.6, 198.0, 178.2, 79.2}, {171.7, 124.2, 201.6, 136.3, 128.7, 178.2, 29.7, 158.4, 59.5, 5.4, 26.4, 9.4, 198.0, 118.8, 158.4, 79.2}, {36.0, 16.8, 148.2, 125.4, 148.5, 108.9, 188.1, 217.8, 250.2, 105.0, 78.0, 145.2, 5.94, 138.6, 79.2, 118.8}, {33.6, 122.2, 100.8, 178.2, 237.6, 118.8, 118.8, 168.3, 19.2, 130.0, 112.0, 108.9, 207.9, 188.1, 79.2, 89.1}, {47.0, 191.4, 29.7, 19.8, 138.6, 118.8, 178.2, 29.7, 225.6, 158.4, 198.0, 237.6, 257.4, 14.85, 148.5, 118.8}, {89.1, 247.5, 39.6, 12.87, 217.8, 178.2, 178.2, 29.7, 8.91, 59.4, 207.9, 138.6, 227.7, 49.5, 168.3, 188.1}, {128.7, 237.6, 158.4, 198.0, 227.7, 257.4, 128.7, 207.9, 168.3, 168.3, 148.5, 39.6, 79.2, 138.6, 217.8, 108.9}, {118.8, 227.7, 198.0, 227.7, 5.94, 59.4, 148.5, 207.9, 237.6, 217.8, 39.6, 128.7, 178.2, 217.8, 227.7, 207.9}, {5.94, 168.3, 217.8, 118.8, 257.4, 11.88, 108.9, 188.1, 69.3, 19.8, 79.2, 158.4, 118.8, 99.0, 138.6, 89.1}};

    private double[][] roundArray(Matrix matrix, int decimalPlaces) {
        double decimal = Math.pow(10, decimalPlaces);
        var arr = matrix.getArray();
        double[][] result = new double[arr.length][arr[0].length];

        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr[0].length; j++) {
                result[i][j] = Math.round(arr[i][j] * decimal) / decimal;
            }
        }
        return result;
    }
}
